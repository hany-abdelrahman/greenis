// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.github.greenis";
option java_outer_classname = "GreenisProto";
option objc_class_prefix = "HLW";

package greenis;

// The greenis server definition.
service GreenisServer {
  // Handle put key value pair request from the client
  rpc put (PutRequest) returns (PutResponse) {}

  // Handle get request from the client
  rpc get (GetRequest) returns (GetResponse) {}

  // Handle contains request from the client
  rpc contains (ContainsRequest) returns (ContainsResponse) {}

  // Handle delete request from the client
  rpc delete (DeleteRequest) returns (DeleteResponse) {}
}

enum Status {
  OK = 0;
  ERROR = 1;
  EXISTS = 2;
  NOT_EXISTS = 3;
}

// The request message containing the key, value pair to be added.
message PutRequest {
  string key = 1;
  bytes value = 2;
}

// The response message containing the status.
message PutResponse {
  Status status = 1;
}

// The contains request containing the key that will be checked for existence.
message ContainsRequest {
  string key = 1;
}

// The contains response containing the status.
message ContainsResponse {
  Status status = 1;
}

// The delete request containing the key to be deleted.
message DeleteRequest {
  string key = 1;
}

// The delete response containing the status.
message DeleteResponse {
  Status status = 1;
}

// The get request containing the key to be fetched.
message GetRequest {
  string key = 1;
}

// The delete response containing the status.
message GetResponse {
  Status status = 1;
  bytes value = 2;
}